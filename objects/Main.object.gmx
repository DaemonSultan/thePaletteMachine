<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Window</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>recentButton = "";

var hmargin = (room_width - 825) / 2;
var vmargin = (room_height - 594) / 2;

x = hmargin;
y = vmargin;

main_x = x + 627;
main_y = y;
main_width = 231;
main_height = 594;

ori_x = x;
ori_y = y;
ori_width = 264;
ori_height = 462;

new_x = x + 330;
new_y = y;
new_width = 264;
new_height = 462;

anim_x = x;
anim_y = y + 495;
anim_width = 594;
anim_height = 99;

btn_load = create_button(main_x + 99, main_y + 33, "LOAD", true, true);
btn_save = create_button(main_x + 99, main_y + 132, "SAVE", true, true);
btn_pick = create_button(main_x + 99, main_y + 231, "PICK COLOR", true, true);
btn_new = create_button(main_x + 99, main_y + 330, "NEW COLOR", true, true);
btn_eps = create_button(main_x + 99, main_y + 429, "SET TOLERANCE", true, true);
btn_apply = create_button(main_x + 99, main_y + 528, "APPLY COLOR", true, true);

btn_left = create_button(anim_x + 33, anim_y + 33, "&lt;", false, true);
btn_right = create_button(anim_x + 99, anim_y + 33, "&gt;", false, true);
btn_set = create_button(anim_x + anim_width - 132, anim_y + 33, "SET AS NEW", true, true);

directory = working_directory;

sprite = noone;
surface = noone;
currentImg = 0;
imgNum = 0;
ratio = 1;

pickColor = false;
pickedColor = c_white;
newHue = 0;
apply = false;
eps = 10;

newSprite = noone;
loadName = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ratio = max(1, ratio/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ratio = min(16, ratio*2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pickColor and point_in_rectangle(mouse_x, mouse_y, ori_x, ori_y, ori_x + ori_width, ori_y + ori_height)){
    pickedColor = draw_getpixel(mouse_x, mouse_y);
    var r = color_get_red(pickedColor);
    var g = color_get_green(pickedColor);
    var b = color_get_blue(pickedColor);
    var rgb = string(r) + ", " + string(g) + ", " + string(b);
    show_message(rgb);
    btn_pick.color = pickedColor;
    pickColor = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button interactions
switch(recentButton){
    case "LOAD":
        sprite_delete(sprite);
        sprite = noone;
        sprite_delete(newSprite);
        newSprite = noone;
        var filename = get_open_filename_ext("png|*.png", "", directory, "Load a PNG File");
        if(filename == "") {show_message("Loading Cancelled."); break;}
        sprite = png_load(filename);
    break;
    case "SAVE":
        if(newSprite == noone) {show_message("You must have the new image."); break;}
        var imsiName = "";
        if(imgNum &gt; 1) imsiName = loadName + "_new_strip" + string(imgNum) + ".png";
        else imsiName = loadName + "_new.png";        
        var save = get_save_filename_ext("png|*.png", imsiName, directory, "Save as a PNG File");
        if(save == "") {show_message("Saving Cancelled."); break;}
        sprite_save_strip(newSprite, save);        
    break;
    case "PICK COLOR":
        pickColor = true;
    break;
    case "NEW COLOR":
        var hue = get_integer("Pick a Hue between 0 and 255, invalid value will return a random Hue.", irandom(255));
        if(hue &lt; 0 or hue &gt; 255) hue = irandom(255);
        btn_new.color = make_colour_hsv(hue, 255, 255);
        newHue = hue;
    break;
    case "APPLY COLOR":
        if(sprite == noone){show_message("You must load an original image.") break;}
        sprite_delete(newSprite);
        newSprite = noone;
        apply = true;
    break;
    case "SET TOLERANCE":
        eps = clamp(get_integer("Set tolerance.", eps), 0, 255);
    break;
    case "&lt;":
        if(currentImg == 0) currentImg = imgNum - 1;
        else currentImg--;
    break;
    case "&gt;":
        if(currentImg == imgNum - 1) currentImg = 0;
        else currentImg++;
    break;
    case "SET AS NEW":
        if(newSprite == noone) {show_message("You must have the new image."); break;}
        sprite_assign(sprite, newSprite);
        sprite_delete(newSprite);
        newSprite = noone;            
    break;
}
recentButton = "";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_delete(sprite);
sprite_delete(newSprite);
surface_free(surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var oldHue = color_get_hue(pickedColor);
draw_sprite(LabelS, 0, 1, 1);
draw_panel(main_x, main_y, main_x + main_width, main_y + main_height); // Main
draw_panel(ori_x, ori_y, ori_x + ori_width, ori_y + ori_height); // Original
draw_panel(new_x, new_y, new_x + new_width, new_y + new_height); // NewCol
draw_panel(anim_x, anim_y, anim_x + anim_width, anim_y + anim_height); // AnimControl

if(sprite != noone){
    draw_set_color(c_black);
    draw_set_font(KenVector12);
    var str = string(currentImg) + "/" + string(imgNum - 1);
    if(imgNum &gt; 1) draw_text(anim_x + 165, anim_y + 33, str);
    draw_sprite_ext(sprite, currentImg, ori_x + floor(ori_width / 2), ori_y + floor(ori_height / 2), ratio, ratio, 0, c_white, 1); 
    if(surface_exists(surface)){
        if(apply){
            var prg = "Applying in Progress...";
            draw_text((room_width / 2) - ceil(string_width(prg) / 2), 30, prg);
            apply = false;
            for(var img = 0; img &lt; imgNum; img++){
                surface_set_target(surface);
                draw_clear_alpha(c_black, 0);
                draw_sprite_ext(sprite, img, sprite_get_xoffset(sprite), sprite_get_yoffset(sprite), 1, 1, 0, c_white, 1);
                for(var i = 0; i &lt; sprite_get_width(sprite); i++){
                    for(var j = 0; j &lt; sprite_get_height(sprite); j++){
                        var currentColor = draw_getpixel(i,j);
                        if(color_get_saturation(currentColor) == 0) continue;
                        var currentHue = color_get_hue(currentColor);
                        if !((abs(currentHue - oldHue) &lt;= eps) or (255 - abs(currentHue - oldHue) &lt;= eps)) continue;
                        var newColor = make_color_hsv(newHue, color_get_saturation(currentColor), color_get_value(currentColor));
                        draw_set_color(newColor);
                        draw_point(i, j);
                    }
                }
                if(img == 0){
                    newSprite = sprite_create_from_surface(surface, 0, 0, sprite_get_width(sprite), sprite_get_height(sprite), false, false, sprite_get_xoffset(sprite), sprite_get_yoffset(sprite));
                }else{
                    sprite_add_from_surface(newSprite, surface, 0, 0, sprite_get_width(sprite), sprite_get_height(sprite), false, false);
                }
                surface_reset_target();
            }
            
        }
    }
}
if(newSprite != noone){
    draw_sprite_ext(newSprite, currentImg, new_x + floor(new_width / 2), new_y + floor(new_height / 2), ratio, ratio, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
